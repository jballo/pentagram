{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 124, "column": 0}, "map": {"version":3,"sources":["file:///Users/jonathanballona/Desktop/WEB/pentagram/frontend/src/app/api/users/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { PrismaClient } from '@prisma/client/edge'\nimport { withAccelerate } from '@prisma/extension-accelerate'\nimport { WebhookEvent } from '@clerk/nextjs/server';\nimport { headers } from 'next/headers';\nimport { Webhook } from 'svix';\n\n\nconst webhookSecret = process.env.CLERK_WEBHOOK_SECRET || ``\n\n\nexport async function POST(request: Request) {\n\n    const prisma = new PrismaClient().$extends(withAccelerate());\n    try {\n\n        const payloadString = await request.text();\n        const headerPayload = await headers();\n\n        const svixHeaders = {\n            'svix-id': headerPayload.get('svix-id')!,\n            'svix-timestamp': headerPayload.get('svix-timestamp')!,\n            'svix-signature': headerPayload.get('svix-signature')!,\n        };\n\n        const wh = new Webhook(webhookSecret);\n        const event = wh.verify(payloadString, svixHeaders) as WebhookEvent;\n\n        const type = event.type;\n\n        console.log(\"type: \", type);\n        console.log(\"event: \", event);\n\n        if (type !== \"user.created\") throw new Error(`Wrong event from clerk webhook!`);\n        \n        const user_id = event.data.id;\n        const user_email = event.data.email_addresses[0].email_address;\n\n        await prisma.user.create({\n            data: {\n                id: user_id,\n                email: user_email\n            }\n        });\n\n        return NextResponse.json({\n            success: true,\n            message: \"User created successfully!\"\n        });\n        \n    } catch (error) {\n        console.error(\"Error processing request: \", error);\n        return NextResponse.json(\n            { success: false, error: \"Failed to create user\"},\n            { status: 500 }\n        );\n    } finally {\n        await prisma.$disconnect();\n    }\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;AAEA;AACA;;;;;;AAGA,MAAM,gBAAgB,QAAQ,GAAG,CAAC,oBAAoB,IAAI,EAAE;AAGrD,eAAe,KAAK,OAAgB;IAEvC,MAAM,SAAS,IAAI,6IAAA,CAAA,eAAY,GAAG,QAAQ,CAAC,CAAA,GAAA,sKAAA,CAAA,iBAAc,AAAD;IACxD,IAAI;QAEA,MAAM,gBAAgB,MAAM,QAAQ,IAAI;QACxC,MAAM,gBAAgB,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD;QAElC,MAAM,cAAc;YAChB,WAAW,cAAc,GAAG,CAAC;YAC7B,kBAAkB,cAAc,GAAG,CAAC;YACpC,kBAAkB,cAAc,GAAG,CAAC;QACxC;QAEA,MAAM,KAAK,IAAI,uIAAA,CAAA,UAAO,CAAC;QACvB,MAAM,QAAQ,GAAG,MAAM,CAAC,eAAe;QAEvC,MAAM,OAAO,MAAM,IAAI;QAEvB,QAAQ,GAAG,CAAC,UAAU;QACtB,QAAQ,GAAG,CAAC,WAAW;QAEvB,IAAI,SAAS,gBAAgB,MAAM,IAAI,MAAM,CAAC,+BAA+B,CAAC;QAE9E,MAAM,UAAU,MAAM,IAAI,CAAC,EAAE;QAC7B,MAAM,aAAa,MAAM,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,aAAa;QAE9D,MAAM,OAAO,IAAI,CAAC,MAAM,CAAC;YACrB,MAAM;gBACF,IAAI;gBACJ,OAAO;YACX;QACJ;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACrB,SAAS;YACT,SAAS;QACb;IAEJ,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;YAAE,SAAS;YAAO,OAAO;QAAuB,GAChD;YAAE,QAAQ;QAAI;IAEtB,SAAU;QACN,MAAM,OAAO,WAAW;IAC5B;AACJ","debugId":null}}]
}